---
- name: Ensure working directories are created
  win_file:
    path: "{{ item }}"
    state: directory
  with_items:
    - C:\Install
    - C:\Install\AutomationParameters
    - C:\Install\DownloadStack
    - C:\Install\Scripts
    - C:\Install\SAPCAR
    - C:\Install\SWPM10-SP25-0

# Download install files
- name: Download SAP install files
  script: scripts/Download-SAPFiles.ps1 >
    -StorageAccountName "{{ storage_account_name }}"
    -StorageAccountKey "{{ storage_account_key }}"
    -FileShareUri "{{ file_share_uri }}"
    -Folders "DownloadStack","SAPCAR","SWPM10-SP25-0"

- name: Stop any running SAP installer processes
  win_shell: Get-Process sapinst* | Stop-Process
  args:
    executable: powershell
  become: yes
  become_method: runas
  become_user: "{{ sap_install_user }}"
  vars:
    ansible_become_password: "{{ sap_install_password }}"

# Extract SWPM
- name: Extract SWPM
  win_shell: |
    C:\Install\SAPCAR\SAPCAR_1014-80000938.exe -xvf C:\Install\SWPM10-SP25-0\SWPM10SP25_0-20009707.SAR -R C:\SWPM
  args:
    executable: cmd
  
# Copy script for checking if SAP instances exist on the server
- name: Copy instance existence check script
  win_copy: 
    src: scripts/Check-InstanceExistence.ps1
    dest: C:\Install\Scripts\Check-InstanceExistence.ps1

# Checks for app install on ASCS server
- name: Check for existing ASCS installation
  win_shell: C:\Install\Scripts\Check-InstanceExistence.ps1 >
    -ASCSHost "{{ ascs_host }}"
    -TargetHost "{{ ansible_hostname }}"
    -TargetInstanceNumber 0
  become: yes
  become_method: runas
  become_user: "{{ sap_install_user }}"
  vars:
    ansible_become_password: "{{ sap_install_password }}"
  register: ascs_install
  when: '"ascs" in hostvars[inventory_hostname].group_names'

# Copy ASCS paramaters file
- name: Copy ASCS parameters files
  template:
    src: templates/ascs.j2
    dest: C:\Install\AutomationParameters\ascs.params
    newline_sequence: '\r\n'
  when: '"ascs" in hostvars[inventory_hostname].group_names and ascs_install.stdout_lines[0] == "false"'

# Run SAP installer for ASCS server
- name: Run SAP installer for ASCS
  win_shell: C:\SWPM\sapinst.exe SAPINST_INPUT_PARAMETERS_URL=C:\Install\AutomationParameters\ascs.params SAPINST_EXECUTE_PRODUCT_ID=NW_ABAP_ASCS:NW740SR2.MSS.CP SAPINST_SKIP_DIALOGS=true SAPINST_START_GUISERVER=false
  become: yes
  become_method: runas
  become_user: "{{ sap_install_user }}"
  vars:
    ansible_become_password: "{{ sap_install_password }}"
  when: '"ascs" in hostvars[inventory_hostname].group_names and ascs_install.stdout_lines[0] == "false"'

# Set physical memory limit on ASCS server
- name: Set physical memory parameter on ASCS server
  win_lineinfile:
    path: "C:\\usr\\sap\\{{ environment_sid }}\\SYS\\profile\\DEFAULT.PFL"
    line: "PHYS_MEMSIZE = 30%"
  register: phys_memsize
  when: '"ascs" in hostvars[inventory_hostname].group_names'

# Restart ASCS server
- name: Restart SAP system on ASCS server
  win_shell: | 
    & "C:\\Program Files\\SAP\\hostctrl\\exe\\sapcontrol.exe" -nr 0 -host "{{ ascs_host }}" -user "{{ sap_install_user }}" "{{ sap_install_password }}" -function RestartSystem
    Start-Sleep 120
  args:
    executable: powershell
  when: '"ascs" in hostvars[inventory_hostname].group_names and phys_memsize.changed == true'

# Checks for existing successful app install on DB server
- name: Check for existing installation - DB
  win_stat:
    path: "C:\\Program Files\\sapinst_instdir\\NW740SR2\\MSS\\COPY\\SYSTEM\\DISTRIBUTED\\AS-ABAP\\DB\\installationSuccesfullyFinished.dat"
  register: db_install
  when: '"data" in hostvars[inventory_hostname].group_names'

# Copy parameters file for DB install
- name: Copy DB parameters files
  template:
    src: templates/database.j2
    dest: C:\Install\AutomationParameters\database.params
    newline_sequence: '\r\n'
  when: '"data" in hostvars[inventory_hostname].group_names and db_install.stat.exists == false'

# Run SAP installer on DB server
- name: Run SAP installer for DB instance
  win_shell: C:\SWPM\sapinst.exe SAPINST_INPUT_PARAMETERS_URL=C:\Install\AutomationParameters\database.params SAPINST_EXECUTE_PRODUCT_ID=NW_ABAP_DB:NW740SR2.MSS.CP SAPINST_SKIP_DIALOGS=true SAPINST_START_GUISERVER=false
  become: yes
  become_method: runas
  become_user: "{{ sap_install_user }}"
  vars:
    ansible_become_password: "{{ sap_install_password }}"
  when: '"data" in hostvars[inventory_hostname].group_names and db_install.stat.exists == false'

# Run SQL cmds prereqs
- name: Copy SQL prereqs script
  template:
    src: "templates/{{ item }}.j2"
    dest: C:\install\AutomationParameters\{{ item }}.sql
    newline_sequence: '\r\n'
  with_items:
    - pas-sql-prereqs
    - UnlockDDIC000
  when: '"data" in hostvars[inventory_hostname].group_names'

- name: Run SQL cmds
  win_shell: sqlcmd.exe -b -i "C:\install\AutomationParameters\{{ item }}"
  with_items:
    - pas-sql-prereqs.sql
    - UnlockDDIC000.sql
  become: yes
  become_method: runas
  become_user: "{{ sap_install_user }}"
  vars:
    ansible_become_password: "{{ sap_install_password }}"
  when: '"data" in hostvars[inventory_hostname].group_names'

- name: Check for existing PAS10 instance - PAS
  win_shell: C:\Install\Scripts\Check-InstanceExistence.ps1 >
    -ASCSHost "{{ ascs_host }}"
    -TargetHost "{{ ansible_hostname }}"
    -TargetInstanceNumber 10
  become: yes
  become_method: runas
  become_user: "{{ sap_install_user }}"
  vars:
    ansible_become_password: "{{ sap_install_password }}"
  register: pas_10
  when: 'ansible_hostname == pas_host'

- name: Copy PAS parameters file
  template: 
    src: templates/pas.j2
    dest: C:\Install\AutomationParameters\pas.params
    newline_sequence: '\r\n'
  when: 'ansible_hostname == pas_host and pas_10.stdout_lines[0] == "false"'

- name: Run SAP installer on primary app server
  win_shell: C:\SWPM\sapinst.exe SAPINST_INPUT_PARAMETERS_URL=C:\Install\AutomationParameters\pas.params SAPINST_EXECUTE_PRODUCT_ID=NW_ABAP_CI:NW740SR2.MSS.CP SAPINST_SKIP_DIALOGS=true
  become: yes
  become_method: runas
  become_user: "{{ sap_install_user }}"
  vars:
    ansible_become_password: "{{ sap_install_password }}"
  when: 'ansible_hostname == pas_host and pas_10.stdout_lines[0] == "false"'

- name: Copy parameter files to app servers
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    newline_sequence: '\r\n'
  with_items:
    - { src: templates/aas10.j2, dest: "C:\\install\\AutomationParameters\\aas10.params" }
    - { src: templates/aas20.j2, dest: "C:\\install\\AutomationParameters\\aas20.params" }
    - { src: templates/aas30.j2, dest: "C:\\install\\AutomationParameters\\aas30.params" }
  when: '"app" in hostvars[inventory_hostname].group_names'

- name: Check for existing instance 10 on additional app servers
  win_shell: C:\Install\Scripts\Check-InstanceExistence.ps1 >
    -ASCSHost "{{ ascs_host }}"
    -TargetHost "{{ ansible_hostname }}"
    -TargetInstanceNumber 10
  become: yes
  become_method: runas
  become_user: "{{ sap_install_user }}"
  vars:
    ansible_become_password: "{{ sap_install_password }}"
  register: aas_10
  when: '"app" in hostvars[inventory_hostname].group_names and ansible_hostname != pas_host'

- name: Run SAP installer for instance 10 on additional app servers
  win_shell: C:\SWPM\sapinst.exe SAPINST_INPUT_PARAMETERS_URL=C:\install\AutomationParameters\aas10.params SAPINST_EXECUTE_PRODUCT_ID=NW_DI:NW740SR2.MSS.PD SAPINST_SKIP_DIALOGS=true SAPINST_START_GUISERVER=false
  become: yes
  become_method: runas
  become_user: "{{ sap_install_user }}"
  vars:
    ansible_become_password: "{{ sap_install_password }}"
  when: '"app" in hostvars[inventory_hostname].group_names and ansible_hostname != pas_host and aas_10.stdout_lines[0] == "false"'

- name: Check for existing AAS20 instances - all app servers
  win_shell: C:\Install\Scripts\Check-InstanceExistence.ps1 >
    -ASCSHost "{{ ascs_host }}"
    -TargetHost "{{ ansible_hostname }}"
    -TargetInstanceNumber 20
  become: yes
  become_method: runas
  become_user: "{{ sap_install_user }}"
  vars:
    ansible_become_password: "{{ sap_install_password }}"
  register: aas_20
  when: '"app" in hostvars[inventory_hostname].group_names'
  
- name: Run AAS20
  win_shell: C:\SWPM\sapinst.exe SAPINST_INPUT_PARAMETERS_URL=C:\install\AutomationParameters\aas20.params SAPINST_EXECUTE_PRODUCT_ID=NW_DI:NW740SR2.MSS.PD SAPINST_SKIP_DIALOGS=true SAPINST_START_GUISERVER=false
  become: yes
  become_method: runas
  become_user: "{{ sap_install_user }}"
  vars:
    ansible_become_password: "{{ sap_install_password }}"
  when: '"app" in hostvars[inventory_hostname].group_names and aas_20.stdout_lines[0] == "false"'

- name: Check for existing AAS30 instances - AAS
  win_shell: C:\Install\Scripts\Check-InstanceExistence.ps1 >
    -ASCSHost "{{ ascs_host }}"
    -TargetHost "{{ ansible_hostname }}"
    -TargetInstanceNumber 30
  become: yes
  become_method: runas
  become_user: "{{ sap_install_user }}"
  vars:
    ansible_become_password: "{{ sap_install_password }}"
  register: aas_30
  when: '"app" in hostvars[inventory_hostname].group_names'
  
- name: Run AAS30
  win_shell: C:\SWPM\sapinst.exe SAPINST_INPUT_PARAMETERS_URL=C:\install\AutomationParameters\aas30.params SAPINST_EXECUTE_PRODUCT_ID=NW_DI:NW740SR2.MSS.PD SAPINST_SKIP_DIALOGS=true SAPINST_START_GUISERVER=false
  become: yes
  become_method: runas
  become_user: "{{ sap_install_user }}"
  vars:
    ansible_become_password: "{{ sap_install_password }}"
  when: '"app" in hostvars[inventory_hostname].group_names and aas_30.stdout_lines[0] == "false"'
