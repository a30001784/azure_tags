---
- set_fact:
    cleanup_script: "{{ module }}_preclean.sql"

# Copy BDLS scripts
- name: Copy BDLS SQL scripts
  win_copy: 
    src: "scripts/{{ module }}"
    dest: "C:\\BDLS"

# Copy SQL/PS scripts
- name: Transfer SQL/PS scripts 
  win_copy:
    src: "scripts/{{ item.src }}"
    dest: "C:\\Install\\Scripts\\{{ item.dst }}"
  with_items:
    - { src: "Invoke-SPUpdateStats.ps1", dst: "Invoke-SPUpdateStats.ps1" }
    - { src: "Set-MAXDOP.ps1", dst: "Set-MAXDOP.ps1" }
    - { src: "{{ module }}/{{ cleanup_script }}", dst: "{{ cleanup_script }}"  }
    - { src: "Get-LogicalSystemNames.ps1", dst: "Get-LogicalSystemNames.ps1" }

# Update SQL index statistics
- name: Update SQL index statistics
  win_shell: C:\Install\Scripts\Invoke-SPUpdateStats.ps1 >
    -Database "{{ environment_sid }}"
  become: yes
  become_method: runas
  become_user: "{{ sap_install_user }}"
  vars:
    ansible_become_password: "{{ sap_install_password }}"

# Set MAXDOP
- name: Set max degree of parallelism
  win_shell: C:\Install\Scripts\Set-MAXDOP.ps1 > 
    -MaxDegreeOfParallelism 8
  become: yes
  become_method: runas
  become_user: "{{ sap_install_user }}"
  vars:
    ansible_become_password: "{{ sap_install_password }}"

# Run database cleanup scripts
- name: Run database cleanup scripts
  win_shell: sqlcmd.exe -b -i "C:\\Install\\Scripts\\{{ cleanup_script }}" -v "database={{ environment_sid }}" -v "schema={{ environment_sid | lower }}"
  become: yes
  become_method: runas
  become_user: "{{ sap_install_user }}"
  vars:
    ansible_become_password: "{{ sap_install_password }}"

# Get logical system names
- name: Get logical system names
  win_shell: C:\Install\Scripts\Get-LogicalSystemNames.ps1 >
    -Database "{{ environment_sid }}"
    -Schema "{{ environment_sid | lower }}"
    -OutFile "C:\Windows\Temp\{{ environment_sid }}.txt"
  become: yes
  become_method: runas
  become_user: "{{ sap_install_user }}"
  vars:
    ansible_become_password: "{{ sap_install_password }}"

- name: Fetch logical system names file
  fetch:
    src: "C:\\Windows\\Temp\\{{ environment_sid }}.txt"
    dest: /tmp/logsys_files/
    flat: true

# Get ISU LS name
- name: Set ISU Source Logical System Name
  win_shell: (Invoke-Sqlcmd -Query "USE {{ isu_sid }} SELECT LOGSYS FROM [{{ isu_sid | lower }}].T000 WHERE MANDT = 100;" -ServerInstance "{{ groups['isu-data'][0] }}").LOGSYS
  register: isu_ls_name_s
  become: yes
  become_method: runas
  become_user: "{{ sap_install_user }}"
  vars:
    ansible_become_password: "{{ sap_install_password }}"

# Get CRM LS name
- name: Set CRM Source Logical System Name
  win_shell: (Invoke-Sqlcmd -Query "USE {{ crm_sid }} SELECT LOGSYS FROM [{{ crm_sid | lower }}].T000 WHERE MANDT = 100;" -ServerInstance "{{ groups['crm-data'][0] }}").LOGSYS
  register: crm_ls_name_s
  become: yes
  become_method: runas
  become_user: "{{ sap_install_user }}"
  vars:
    ansible_become_password: "{{ sap_install_password }}"

- set_fact:
    isu_source_ls: "{{ isu_ls_name_s.stdout_lines[0] }}"

- set_fact:
    crm_source_ls: "{{ crm_ls_name_s.stdout_lines[0] }}"